
#include <iostream>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "fpga.hpp"
#include "raw_wave.hpp"
#include <stdio.h>


fpga_dev fpga;

static void at_exit1(void)
{
    fpga.dc_ac_stop();
    fpga.dc_dc_stop();
    fpga.adc_stop_sample();

    printf("at_exit stopped.\n");
    fflush(stdout);
}

int main(int argc, char *argv[])
{
    raw_wave ch1;               // secondary current
    raw_wave ch2;               // secondary voltage
    raw_wave ch3;               // secondary voltage (connect point)
    raw_wave ch4;               // primary   voltage
    int   cycle   = 4;
    int   delay   = 20;
    float freq    = 50;
    float   range1  = 1.0;
    float   range2  = 30;
    float   range3  = 30;
    float   range4  = 30;
    float voltage = 4.0;
    int silent = 0;

    atexit(at_exit1);

    printf("example: ./fpga -d 21 -f 51.5 -v 4.0 -r1 129 -r2 5 -r3 5 -r4 5 >data.csv");

    printf("default:\n");
#define SHF(n) printf(#n "=%f\n", n)
#define SHI(n) printf(#n "=%d\n", n)
    SHI(cycle);
    SHI(delay);
    SHF(freq);
    SHF(range1);
    SHF(range2);
    SHF(range3);
    SHF(range4);
    SHF(voltage);
    SHI(silent);

    printf("\nafter:\n");

#define ISP_float(var,flag)                     \
    do {                                        \
        if (0==strcmp(flag,argv[i])) {          \
            sscanf(argv[i+1], "%f", &var);      \
        }                                       \
    }while (0)


#define ISP_int(var,flag)                       \
    do {                                        \
        if (0==strcmp(flag,argv[i])) {          \
            var = atoi(argv[i+1]);              \
        }                                       \
    }while (0)

    for (int i=0; i<argc; i++) {
        ISP_int(cycle,  "-c");
        ISP_int(delay,  "-d");
        ISP_int(silent,  "-s");
        ISP_float(freq,   "-f");
        ISP_float(voltage,"-v");
        ISP_float(range1, "-R1");
        ISP_float(range2, "-R2");
        ISP_float(range3, "-R3");
        ISP_float(range4, "-R4");
    }
    SHI(cycle);
    SHI(delay);
    SHF(freq);
    SHF(range1);
    SHF(range2);
    SHF(range3);
    SHF(range4);
    SHF(voltage);
    SHI(silent);


    fpga.init(0, 5.0, cycle );

    // fpga.set_scale( scale );

    // 4Hz ~ 300Hz
    fpga.dc_ac_f_set( freq );
    fpga.set_np_per_cycle( 512 );
    fpga.dc_dc_v_set_percent( 100 );
    fpga.dc_ac_p_set( 0 );
    // fpga.set_range( range1, range2, range3, range4 );
    fpga.select_range_by_value(0, range1);
    fpga.select_range_by_value(1, range2);
    fpga.select_range_by_value(2, range3);
    fpga.select_range_by_value(3, range4);
    fpga.dc_ac_v_set(voltage);

    fpga.dc_ac_enable();
    fpga.dc_dc_start();
    fpga.dc_ac_start();

    sleep(1);
    fpga.adc_start_sample();

    int ret;

    for (int i=0; i<delay; i++) {

        ret = fpga.read( &ch1, &ch2, &ch3, &ch4 );

        ch1.calculate_all();
        ch2.calculate_all();
        ch3.calculate_all();
        ch4.calculate_all();

        printf( "index%d,    Iload, Usrc,  Upri , Uload\n"
                "\trms:,     %8.4f, %8.4f, %8.4f, %8.4f\n"
                "\trmsbase:, %8.4f, %8.4f, %8.4f, %8.4f\n"
                "\tthd1:,    %8.4f, %8.4f, %8.4f, %8.4f\n",
                i,
                ch1.get_rms(),
                ch2.get_rms(),
                ch3.get_rms(),
                ch4.get_rms(),

                ch1.get_base_rms(),
                ch2.get_base_rms(),
                ch3.get_base_rms(),
                ch4.get_base_rms(),

                ch1.get_thd(),
                ch2.get_thd(),
                ch3.get_thd(),
                ch4.get_thd()
            );
        sleep(1);
    }

    fpga.dc_ac_stop();
    fpga.dc_dc_stop();
    fpga.adc_stop_sample();

    std::cout << "ret=" << ret << " rms:" << ch1.get_rms() << std::endl;

    std::cout << "newer version end get_np() = " << ch1.get_np() << std::endl;
    int n = ch1.get_np();
    std::vector<double> &chd1 = ch1.get_writable_buffer();
    std::vector<double> &chd2 = ch2.get_writable_buffer();
    std::vector<double> &chd3 = ch3.get_writable_buffer();
    std::vector<double> &chd4 = ch4.get_writable_buffer();
    if (!silent){
        printf("ch1,ch2,ch3,ch4\n");
        for (int i=0; i<n; i++ ) {
            printf("%6.4f, %6.4f, %6.4f, %6.4f\n ",
                   chd1[i],
                   chd2[i],
                   chd3[i],
                   chd4[i]
                );
        }

    }

#if 0
    for (int i=0; i<n; i++ ){
        if (i%16 == 0){
            printf("\n");
        }
        printf("%6.1f ", chx[i] );
    }

    {
        printf("ch2:\n");
        std::vector<double> &chx = ch2.get_writable_buffer();
        for (int i=0; i<n; i++ ){
            if (i%16 == 0){
                printf("\n");
            }
            printf("%6.1f ", chx[i] );
        }
    }
    {
        printf("ch3:\n");
        std::vector<double> &chx = ch3.get_writable_buffer();
        for (int i=0; i<n; i++ ){
            if (i%16 == 0){
                printf("\n");
            }
            printf("%6.1f ", chx[i] );
        }
    }

    {
        printf("ch4:\n");
        std::vector<double> &chx = ch4.get_writable_buffer();
        for (int i=0; i<n; i++ ){
            if (i%16 == 0){
                printf("\n");
            }
            printf("%6.1f ", chx[i] );
        }
    }
#endif

    fflush( stdout );

    return 0;
}
